#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float gravitationalConstant;
    float deltaTime;
    float width;
    float height;
} ubo;

layout(std140, binding = 1) buffer ParticleSSBOIn {
    Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[ ];
};

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;

    if (i == j) return;

    Particle particleIn = particlesIn[i];

    Particle otherParticle = particlesIn[j];

    vec2 aceleration = otherParticle.position - particleIn.position;
    float dist2 = clamp(dot(aceleration, aceleration), 10, 1000);
    aceleration = ubo.deltaTime * ubo.gravitationalConstant * normalize(aceleration) / dist2;
    particlesOut[i].velocity += aceleration;

}