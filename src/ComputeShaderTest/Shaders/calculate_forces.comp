#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    uint numParticles;
    float gravitationalConstant;
    float deltaTime;
    float width;
    float height;
} ubo;

layout(std140, binding = 1) buffer ParticleSSBOIn {
    Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    Particle particleIn = particlesIn[i];

    particlesOut[i].velocity = particleIn.velocity;
    for (uint j = 0; j < ubo.numParticles; j++) {
        if (i == j) return;

        vec2 aceleration = particlesIn[j].position - particleIn.position;
        float dist2 = dot(aceleration, aceleration);
        if (dist2 > 15) {
            aceleration = ubo.deltaTime * ubo.gravitationalConstant * normalize(aceleration) / dist2;
            particlesOut[i].velocity += aceleration;
        }

    }

}