#version 450

struct Particle {
    vec3 position, velocity, force;
    float density, pressure;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
    float width;
    float height;

    vec3 G;   // external (gravitational) forces
    float REST_DENS;  // rest density
    float GAS_CONST; // const for equation of state
    float H;           // kernel radius
    float HSQ;        // radius^2 for optimization
    float MASS;        // assume all particles have the same mass
    float VISC;       // viscosity constant
    float DT;       // integration timestep
    float POLY6;
    float SPIKY_GRAD;
    float VISC_LAP;
    float EPS;
    float BOUND_DAMPING;
} ubo;

layout(std140, binding = 1) buffer ParticleSSBO {
    Particle particles[ ];
};

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;

    vec3 vec = particles[i].position - particles[j].position;
    float dist2 = dot(vec, vec);
    if (dist2 < ubo.HSQ) {
        float partialDensity = ubo.MASS * ubo.POLY6 * pow(ubo.HSQ, 3.f);
        particles[i].density += partialDensity;
        particles[i].pressure += ubo.GAS_CONST * partialDensity;
    }


}