#version 450

struct Particle {
    vec3 position, velocity, force;
    float density, pressure;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
    float width;
    float height;

    vec3 G;   // external (gravitational) forces
    float REST_DENS;  // rest density
    float GAS_CONST; // const for equation of state
    float H;           // kernel radius
    float HSQ;        // radius^2 for optimization
    float MASS;        // assume all particles have the same mass
    float VISC;       // viscosity constant
    float DT;       // integration timestep
    float POLY6;
    float SPIKY_GRAD;
    float VISC_LAP;
    float EPS;
    float BOUND_DAMPING;
    uint numParticles;
} ubo;

layout(std140, binding = 1) buffer ParticleSSBO {
    Particle particles[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint i = gl_GlobalInvocationID.x;

    vec3 pForce = vec3(0);
    vec3 vForce = vec3(0);
    for (uint j = 0; j < ubo.numParticles; j++) {
        if (i == j) continue;

        vec3 vec = particles[j].position - particles[i].position;
        float dist = length(vec);

        if (dist < ubo.H) {
            pForce += -normalize(vec) * ubo.MASS * (particles[i].pressure + particles[j].pressure)/(2.f * particles[j].density) * ubo.SPIKY_GRAD * pow(ubo.H - dist, 3.f);
            vForce += ubo.VISC * ubo.MASS * (particles[j].velocity - particles[i].velocity) / particles[j].density * ubo.VISC_LAP * (ubo.H - dist);
        }
    }

    particles[i].force = pForce + vForce + ubo.G*ubo.MASS/particles[i].density;

}